version: "3.4"

services:
  php:
    build:
      context: ./api
      target: api_platform_php
    container_name: "php"
    networks:
      - ap-internal
      - ap-api-network
    depends_on:
      - database
    restart: unless-stopped
    volumes:
      - php_socket:/var/run/php
      - ./api:/srv/api:rw,cached
      - ./api/docker/php/conf.d/api-platform.dev.ini:/usr/local/etc/php/conf.d/api-platform.ini
    environment:
      DATABASE_URL: "postgres://${API_DB_USER}:${API_DB_PWD}@database:5432/api?sslmode=disable&charset=utf8"
    healthcheck:
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 30s

  pwa:
    build:
      context: ./pwa
      target: api_platform_pwa_prod
    container_name: "pwa"
    networks:
      - ap-internal
    environment:
      API_PLATFORM_CLIENT_GENERATOR_ENTRYPOINT: http://caddy

  caddy:
    build:
      context: api/
      target: api_platform_caddy
    container_name: "caddy"
    networks:
      - ap-internal
    depends_on:
      - php
      - pwa
    environment:
      PWA_UPSTREAM: pwa:3000
      SERVER_NAME: ${SERVER_NAME:-localhost, caddy:80}
      MERCURE_PUBLISHER_JWT_KEY: ${MERCURE_PUBLISHER_JWT_KEY}
      MERCURE_SUBSCRIBER_JWT_KEY: ${MERCURE_SUBSCRIBER_JWT_KEY}
    restart: unless-stopped
    volumes:
      - php_socket:/var/run/php
      - ./api/docker/caddy/Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
    ports:
      # HTTP
      - target: 80
        published: 80
        protocol: tcp
      # HTTPS
      - target: 443
        published: 443
        protocol: tcp
      # HTTP/3
      - target: 443
        published: 443
        protocol: udp
      # GRAPHQL
      - target: 8443
        published: 8443

  database:
    image: postgres
    container_name: "database"
    networks:
      - ap-api-network
    environment:
      POSTGRES_DB: "api"
      POSTGRES_USER: "${API_DB_USER}"
      POSTGRES_PASSWORD: "${API_DB_PWD}"
    volumes:
      # - db_data:/var/lib/postgresql/data:rw
      # you may use a bind-mounted host directory instead, so that it is harder to accidentally remove the volume and lose all your data!
      - ./api/docker/db/data:/var/lib/postgresql/data:rw

  ########## AUTHENTIFICATION - KEYCLOAK ##########
  
  keycloak:
    image: jboss/keycloak
    container_name: "ap-keycloak"
    networks:
      - ap-internal
      - ap-auth
    environment:
      DB_VENDOR: POSTGRES
      DB_ADDR: keycloak-db
      DB_DATABASE: ${KEYCLOAK_DB_NAME}
      DB_PORT: 5432
      DB_USER: ${KEYCLOAK_DB_USER}
      DB_SCHEMA: public
      DB_PASSWORD: ${KEYCLOAK_DB_PWD}
      KEYCLOAK_USER: ${KEYCLOAK_USER}
      KEYCLOAK_PASSWORD: ${KEYCLOAK_PWD}
      PROXY_ADDRESS_FORWARDING: "true"
    ports:
      - 8180:8080
    depends_on:
      - keycloak-db

  keycloak-db:
    image: postgres
    container_name: "ap-keycloak-db"
    networks:
      - ap-auth
    volumes:
      - ./infrastructure/keycloak/data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${KEYCLOAK_DB_NAME}
      POSTGRES_USER: ${KEYCLOAK_DB_USER}
      POSTGRES_PASSWORD: ${KEYCLOAK_DB_PWD}

  ########## OTHERS ##########
  
  varnish:
    image: varnish
    container_name: "ap-varnish"
    networks:
      - ap-internal
    volumes:
      - ./infrastructure/varnish/default.vcl:/etc/varnish/default.vcl
    ports:
      - 6180:80
    depends_on:
      - caddy
      - keycloak

  email:
    image: mailhog/mailhog
    container_name: email-service
    networks:
      - ap-internal
    ports:
      - 8025:8025
      - 1025:1025

volumes:
  php_socket:
  db_data:
  caddy_data:
  caddy_config:

networks:
  ap-internal:
    external: false
    driver: bridge
  ap-auth:
    external: false
    driver: bridge
  ap-api-network:
    external: false
    driver: bridge
